# this how mosh likes to organize his import statements.
    1. first we import stuff from the react.
    2. then we import stuff from the 3rd party library.
    3. then finally our own import statements.

# we will talk about 'providers' in next part of the course where we talk about more advance topics.    

# notes : Every time mosh writes a bit of code. Before committing his changes he always reviews his code/changes in the source control tab of vs code.
To make sure he has not made any mistake. to see if he has any opportunity to cleanup his code 


# Always work on a small piece of functionality. Make sure it works then move on to next step. 
Don't try to do too many things at once


# Currently GameGrid component is involved in making http request. Currently knows type of request that we are making and knows about our endpoints.
and future will also know of cancelling request using abort controller.
This is something we don't want in our component. Because our 
'component should be primarily responsible for returning markup and handling user interaction at high level'.

Here we have 2 options 

1) One way is to move logic for making http-request inside a service. (as we did in previous chapter)
2) The other option is to move the entire logic (meaning state variables and useEffect) into a custom hook. 
Hooks are not necessarily for sharing functionality across different components. We can also use them to separate concerns and make our code more 
modular and reuseable 


# To render the icons we need a mapping between name of platform and icon.
> we don't wanna implement the mapping in GameCard Because that is a distraction from what this GameCard component is suppose to do.
> so we will move entire logic for rendering the platform in separate component.

## git note :
# what about the issue with code duplication ?
    > we don't wanna fix that in this commit. Since our application is already in the working state. We don't wanna risk breaking anything 
    what if refactoring doesn't work. so we should commit the working code first then work on fixing issue like refactoring.


# Remove duplicate style : to remove duplicated style. we create react container component. That will have the common styles that are required 
by GameCard and CardSkeleton and it will accept reactNode elements as children init.    


# Get Games by Genre :

> In our genreList component we added a new prop called onSelectGenre. This to notify the consumer of this component that a genre has been selected.
in our case the consumer of genreList component is app component. here we get notified and we setSelectedGenre. and this causes app component to 
re-render. So in the next render we will pass the GameGrid component the selectedGenre value.

> In GameGrid we added a new prop which is selectedGenre. and passed it to our useGames hook.

> useGames hook passes the selected genre as query-string parameter to the useData hook

> as part of this lesson we had to open our useData hook and make it more flexible. now we can pass request config object and dependency array to 
useData hook


# refactoring : 
> In app component Currently we have 2 state variables (selectedGenre,selectedPlatform ). But as we add more features we would need even more variables for tracking things
like sort order or search phrases.

> adding bunch of variables and passing them around. is ugly and causes clutter in our code makes it hard to read.

>> So what can we do here ?
    > we should pack related variables inside an object
    > So here we will use what we call a 'query object pattern'
    > so we will create a query object that contains all the information we need to query the games.

 

===========================================================================================================================>
#Discussion : Building reuseable components

> with zustand in place each component. retrieves the pieces of state that it needs. Directly from the store. 
    While this simplifies our code. It makes our component less re-useable Because they rely on store existence to function.
    In contrast passing data via props can make our component more self-contained and re-useable Because they don't rely on external data source.
    In this case it is unlikely that we are gonna reuse any of the component we have refactored.

"There is no one-size-fits-all" solution in managing data flow in the react.

"Choose the right solution based on the project's needs"

===============================================================================================================================>

# Routing with react router.
    > for routing we will use popular library called react router. what we will learn is :

        > Setting up routes.
        > Handling errors.
        > Navigating between pages.
        > dynamic routes.
        > nested routes.
        > Private routes.

