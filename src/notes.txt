# this how mosh likes to organize his import statements.
    1. first we import stuff from the react.
    2. then we import stuff from the 3rd party library.
    3. then finally our own import statements.

# we will talk about 'providers' in next part of the course where we talk about more advance topics.    

# notes : Every time mosh writes a bit of code. Before committing his changes he always reviews his code/changes in the source control tab of vs code.
To make sure he has not made any mistake. to see if he has any opportunity to cleanup his code 


# Always work on a small piece of functionality. Make sure it works then move on to next step. 
Don't try to do too many things at once


# Currently GameGrid component is involved in making http request. Currently knows type of request that we are making and knows about our endpoints.
and future will also know of cancelling request using abort controller.
This is something we don't want in our component. Because our 
'component should be primarily responsible for returning markup and handling user interaction at high level'.

Here we have 2 options 

1) One way is to move logic for making http-request inside a service. (as we did in previous chapter)
2) The other option is to move the entire logic (meaning state variables and useEffect) into a custom hook. 
Hooks are not necessarily for sharing functionality across different components. We can also use them to separate concerns and make our code more 
modular and reuseable 


# To render the icons we need a mapping between name of platform and icon.
> we don't wanna implement the mapping in GameCard Because that is a distraction from what this GameCard component is suppose to do.
> so we will move entire logic for rendering the platform in separate component.

## git note :
# what about the issue with code duplication ?
    > we don't wanna fix that in this commit. Since our application is already in the working state. We don't wanna risk breaking anything 
    what if refactoring doesn't work. so we should commit the working code first then work on fixing issue like refactoring.


# Remove duplicate style : to remove duplicated style. we create react container component. That will have the common styles that are required 
by GameCard and CardSkeleton and it will accept reactNode elements as children init.    